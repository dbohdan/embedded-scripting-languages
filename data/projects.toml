[AbcDatalog]
url = "http://abcdatalog.seas.harvard.edu/"
lang = "Datalog"
impl_in = "Java"
gc = "JVM's GC"
license = "BSD-3-Clause"
notes = "Implements Datalog."

[AngelScript]
url = "http://www.angelcode.com/angelscript/"
lang = "AngelScript"
impl_in = "C++"
gc = "Ref. counting + cycle-detecting tracing GC"
license = "Zlib"
notes = "A statically typed curly brace language resembling C++ itself."

[Animula]
url = "https://gitlab.com/hardenedlinux/animula"
lang = "Scheme"
impl_in = "C"
gc = "Tracing"
license = "Compiler: **GPL-3.0-or-later**, VM: LGPL-3.0-or-later"
notes = "An optimizing compiler and VM for embedded systems. R7RS."

[Anko]
url = "https://github.com/mattn/anko/"
lang = "Anko"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Scriptable interpreter with syntax similar to Go."

[ArkScript]
url = "https://github.com/SuperFola/Ark"
lang = "ArkScript"
impl_in = "C++"
gc = "None (resource release is destruction + optional manual MM)"
license = "MPL-2.0"
notes = "A small functional Lisp-like programming language. Separate bytecode compiler and VM."

[Asp]
url = "https://www.asplang.org/"
lang = "Asp"
impl_in = "C"
gc = "Ref. counting inside a static memory area"
license = "MIT"
notes = "Python-like. Targets embedded systems. Allows blocking calls in scripts without blocking the application. Runs compiled bytecode. Not related to Microsoft's Active Server Pages."

[Atlast]
url = "https://www.fourmilab.ch/atlast/"
lang = "Forth"
impl_in = "C"
gc = "None (manual MM)"
license = "Public domain"
notes = "A dialect of Forth originally developed at Autodesk."

[BeanShell]
url = "https://github.com/beanshell/beanshell/"
lang = "Java"
impl_in = "Java"
gc = "JVM's GC"
license = "Apache-2.0"
notes = "An small, embeddable Java source code interpreter. Understands Java code with certain extensions like method closures."

[Berry]
url = "https://github.com/berry-lang/berry"
lang = "Berry"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "Lightweight dynamically-typed embedded scripting language designed for lower-performance devices with limited memory."

[Boron]
url = "http://urlan.sourceforge.net/boron/"
lang = "Boron"
impl_in = "C"
gc = "Tracing"
license = "LGPL-3.0-or-later"
notes = "An embeddable scripting language similar to Rebol."

[Cascalog]
url = "https://github.com/nathanmarz/cascalog"
lang = "Datalog"
impl_in = "Clojure"
gc = "JVM's GC"
license = "Apache-2.0"
notes = "Implements Datalog."

["cel-go"]
url = "https://github.com/google/cel-go"
lang = "Common Expression Language (CEL)"
impl_in = "Go"
gc = "Go's GC"
license = "Apache-2.0"
notes = "A non-Turing-complete expression language."

["cel-python"]
url = "https://github.com/cloud-custodian/cel-python"
lang = "Common Expression Language (CEL)"
impl_in = "Python"
gc = "Python's GC"
license = "Apache-2.0"
notes = "A non-Turing-complete expression language."

["cel-rust"]
url = "https://github.com/clarkmcc/cel-rust"
lang = "Common Expression Language (CEL)"
impl_in = "Rust"
gc = "None"
license = "MIT"
notes = "A non-Turing-complete expression language."

[CircuitPython]
url = "https://github.com/adafruit/circuitpython"
lang = "Python"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A fork of MicroPython, designed for API uniformity across many microcontrollers."

[ChaiScript]
url = "http://chaiscript.com/"
lang = "ChaiScript"
impl_in = "C++"
gc = "Ref. counting"
license = "BSD-3-Clause"
notes = "A header-only C++14 interpreter library."

["Chibi Scheme"]
url = "https://github.com/ashinn/chibi-scheme"
lang = "Scheme"
impl_in = "C"
gc = "Tracing"
license = "BSD-3-Clause"
notes = "Implements R7RS small."

["CHICKEN Scheme"]
url = "https://call-cc.org/"
lang = "Scheme"
impl_in = "C"
gc = "Tracing"
license = "BSD-3-Clause"
notes = "Implements R5RS (with some [changes](http://wiki.call-cc.org/man/4/Supported%20language)). R7RS support is a work in progress. [Examples of embedding CHICKEN](https://wiki.call-cc.org/embedding)."

[Clasp]
url = "https://github.com/drmeister/clasp"
lang = "Common Lisp"
impl_in = "Common Lisp, C++"
gc = "MPS GC (Boehm-Weiser also supported)"
license = "LGPL-2.0-or-later"
notes = "Full Common Lisp implementation well integrated with C++, using LLVM for the code generation, to integrate closely with C++ applications or libraries."

[daScript]
url = "https://dascript.org/"
lang = "daScript"
impl_in = "C++"
gc = "None (region-based + manual MM?)"
license = "BSD-3-Clause"
notes = "A statically-typed [performance-oriented](https://dascript.org/#performance) scripting language."

["Datalog (c-cube)"]
url = "https://github.com/c-cube/datalog"
lang = "Datalog"
impl_in = "OCaml"
gc = "OCaml's GC"
license = "BSD-2-Clause"
notes = "Implements Datalog."

["Datalog (fogfish)"]
url = "https://github.com/fogfish/datalog"
lang = "Datalog"
impl_in = "Erlang"
gc = "None (no collection inside interpreter state)"
license = "Apache-2.0"
notes = "Implements Datalog."

["Datalog (MITRE Corporation)"]
url = "http://datalog.sourceforge.net/"
lang = "Datalog"
impl_in = "C"
gc = "Tracing (Lua's GC)"
license = "LGPL-2.0-or-later"
notes = "Implements Datalog. It is implemented on top of Lua 5.3 and can be extended with Lua functions."

[Dhall]
url = "https://dhall-lang.org/"
lang = "Dhall"
impl_in = "Haskell"
gc = "Haskell's GC"
license = "BSD-3-Clause"
notes = "A statically-typed functional configuration language. Not Turing-complete. Untrusted code: can't access the file system, can fetch Dhall libraries over HTTP(S) from static URLs (but libraries aren't allowed to access your data), can use up memory and CPU time for a DoS attack. Has a work-in-progress Clojure and Ruby implementation."

[Duktape]
url = "http://duktape.org/"
lang = "JavaScript"
impl_in = "C"
gc = "Ref. counting + cycle-detecting tracing GC"
license = "MIT"
notes = "Implements JavaScript E5/E5.1."

[DWScript]
url = "https://bitbucket.org/egrange/dwscript/"
lang = "DWScript"
impl_in = "Object Pascal (Delphi 2009 or later)"
gc = "Ref. counting + cycle-detecting tracing GC"
license = "MPL-1.1, GPL-3.0 (JavaScript code generator)"
notes = "[Description](https://www.delphitools.info/dwscript). A statically typed Delphi/Free Pascal-like language. Can compile to JavaScript."

[Dyon]
url = "https://github.com/pistondevelopers/dyon"
lang = "Dyon"
impl_in = "Rust"
gc = "None (Rust-style [lifetimes](http://www.piston.rs/dyon-tutorial/lifetimes.html))"
license = "Apache-2.0 or MIT"
notes = "Has optional, optimistic (succeed-by-default) static type checking."

["Embeddable Common Lisp"]
url = "https://gitlab.com/embeddable-common-lisp/ecl"
lang = "Common Lisp"
impl_in = "Common Lisp, C"
gc = "Boehm-Weiser GC"
license = "LGPL-2.0-or-later"
notes = "Full Common Lisp implementation, available as a shared library `libecl.so` embeddable in any C, C++ or other application."

[ephp]
url = "https://github.com/bragful/ephp"
lang = "PHP"
impl_in = "Erlang"
gc = "None (no collection inside interpreter state)"
license = "LGPL-2.1-or-later"
notes = "Implements a subset of PHP 5.5."

[Erlog]
url = "https://github.com/rvirding/erlog"
lang = "Prolog"
impl_in = "Erlang"
gc = "None ()"
license = "Apache-2.0"
notes = "Interprets a subset of standard Prolog."

[Espruino]
url = "https://github.com/espruino/Espruino"
lang = "JavaScript"
impl_in = "C"
gc = "Tracing"
license = "MPL-2.0"
notes = "Implements a subset of JavaScript ES5 in a way suitable for embedded hardware with 8+ KiB RAM."

[Expr]
url = "https://github.com/antonmedv/expr"
lang = "Expr"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Compiles and evaluates statically-typed expressions."

[Falcon]
url = "http://falconpl.org/"
lang = "Falcon"
impl_in = "C++"
gc = "Tracing"
license = "**GPL-2.0** or custom"
notes = "The GC is pluggable."

[fe]
url = "https://github.com/rxi/fe"
lang = "fe"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "Uses a fixed-size memory region. No `malloc`."

[FTH]
url = "http://fth.sourceforge.net"
lang = "Forth"
impl_in = "C"
gc = "Tracing"
license = "BSD-2-Clause"
notes = "A dialect of Forth with objects, hashes, regular expressions, and other extensions."

["GameMonkey Script"]
url = "http://www.gmscript.com/"
lang = "GameMonkey Script"
impl_in = "C++"
gc = "Tracing"
license = "MIT"
notes = "Comes with C bindings. Similar to Lua, multithreaded."

[Gentee]
url = "https://github.com/gentee/gentee/"
lang = "Gentee"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Statically typed."

[gluon]
url = "https://github.com/gluon-lang/gluon"
lang = "gluon"
impl_in = "Rust"
gc = "Tracing"
license = "MIT"
notes = "Statically typed. Inspired by Lua, Haskell, and OCaml. Each executing gluon thread gets a separate heap."

[Goja]
url = "https://github.com/dop251/goja"
lang = "JavaScript"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Implements ECMAScript 5.1. Better standard compliance and performance than otto."

[Golog]
url = "https://github.com/mndrix/golog"
lang = "Prolog"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Implements a subset of standard Prolog."

[Go-Lua]
url = "https://github.com/Shopify/go-lua"
lang = "Lua"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Implements a subset of Lua 5.2."

[GopherLua]
url = "https://github.com/yuin/gopher-lua"
lang = "Lua"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Implements Lua 5.1 with the added support for Go's channels. Lacks the debug hooks and several functions from the C version."

[gpython]
url = "https://github.com/go-python/gpython"
lang = "Python"
impl_in = "Go"
gc = "Go's GC"
license = "BSD-3-Clause"
notes = "Implements a subset of Python 3.4."

[GraalJS]
url = "https://github.com/oracle/graaljs"
lang = "JavaScript"
impl_in = "C++, C, Java"
gc = "JVM's GC"
license = "UPL-1.0"
notes = "Implements ECMAScript 2022 for GraalVM (HotSpot JVM) using Truffle."


[GraalPy]
url = "https://github.com/oracle/graalpython"
lang = "Python"
impl_in = "C, Java"
gc = "JVM's GC"
license = "UPL-1.0"
notes = "Implements Python 3 for GraalVM (HotSpot JVM) using Truffle."


[Gravity]
url = "https://github.com/marcobambini/gravity"
lang = "Gravity"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A class-based concurrent scripting language with a Swift-like syntax."

[Groovy]
url = "http://groovy-lang.org/"
lang = "Groovy"
impl_in = "Java"
gc = "JVM's GC"
license = "Apache-2.0"
notes = "A scripting language for the JVM. A large subset of Java is valid Groovy. [Integrating Groovy into applications](http://groovy-lang.org/integrating.html)."

["GNU Guile"]
url = "https://www.gnu.org/software/guile/"
lang = "Scheme"
impl_in = "C"
gc = "[Boehm](https://www.gnu.org/software/guile/manual/html_node/Conservative-GC.html)"
license = "LGPL-3.0-or-later"
notes = "[\"Guile mostly implements R6RS.\"](https://www.gnu.org/software/guile/manual/guile.html#R6RS-Support)"

[HAC]
url = "https://hacadacompiler.sourceforge.io/"
lang = "Ada"
impl_in = "Ada"
gc = "None (stack only)"
license = "MIT"
notes = "HAC implements a subset of the Ada language. Thus, it can share sources with the embedding application."

[HashLink]
url = "https://hashlink.haxe.org/"
lang = "Haxe"
impl_in = "C"
gc = "Tracing (lazy sweep)"
license = "MIT"
notes = "A bytecode interpreter and a baseline JIT compiler (x86/x86\\_64 only) for [Haxe](https://haxe.org/)."

[Io]
url = "https://github.com/stevedekorte/io"
lang = "Io"
impl_in = "C"
gc = "Tracing"
license = "BSD-3-Clause"
notes = "A prototype-based OO language."

[Interpreter]
url = "https://github.com/Tyill/interpreter"
lang = "Interpreter"
impl_in = "C++"
gc = "None"
license = "MIT"
notes = "Simple tiny interpreter, extensible by the base library (arithmetic operations, containers, filesystem.. etc). Only one header and source file."

[Janet]
url = "https://janet-lang.org/"
lang = "Janet"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A functional and imperative language with a Lisp syntax."

[JerryScript]
url = "https://github.com/jerryscript-project/jerryscript"
lang = "JavaScript"
impl_in = "C"
gc = "Tracing"
license = "Apache-2.0"
notes = "A full ECMAScript 5.1 interpreter written in C99 and optimized for low memory consumption. Uses CMake."

["Jim Tcl"]
url = "http://jim.tcl-lang.org/"
lang = "Tcl"
impl_in = "C"
gc = "Tracing"
license = "BSD-2-Clause"
notes = "Largely compatible with Tcl 8.5 with its own additions."

[Jinx]
url = "https://jamesboer.github.io/Jinx/"
lang = "Jinx"
impl_in = "C++17"
gc = "Ref. counting"
license = "MIT"
notes = "Designed for use in realtime applications such as video games."

[JRuby]
url = "http://www.jruby.org/"
lang = "Ruby"
impl_in = "Java"
gc = "JVM's GC"
license = "Choice of EPL, GPL, and LGPL"
notes = "An implementation of Ruby on the JVM."

[jsish]
url = "https://github.com/pcmacdon/jsish"
lang = "JavaScript"
impl_in = "C"
gc = "Ref. counting"
license = "MIT"
notes = "A JavaScript ES 5.2+ interpreter. Internally structured after Tcl with an extensive C API. Features include subinterpreters, introspection, SQLite bindings, and a web framework with WebSocket support. The code is valid C and C++."

[Jsonnet]
url = "https://jsonnet.org/"
lang = "Jsonnet"
impl_in = "C++"
gc = "Tracing"
license = "Apache-2.0"
notes = "A functional configuration language that extends JSON. Untrusted code: can't access the file system or network, can use up memory and CPU time for a DoS attack. Has [bindings](https://jsonnet.org/ref/bindings.html) for C, C++, Go, Python, and other languages, as well as a separate native Go implementation."

[JTcl]
url = "https://github.com/jtcl-project/jtcl"
lang = "Tcl"
impl_in = "Java"
gc = "Ref. counting"
license = "Various BSD-like"
notes = "Tcl 8.4 with some 8.5 features for the JVM."

[Jython]
url = "http://www.jython.org/"
lang = "Python"
impl_in = "Java"
gc = "JVM's GC"
license = "PSFL (BSD-like)"
notes = "An implementation of Python 2 for the JVM."

[Kawa]
url = "https://www.gnu.org/software/kawa/"
lang = "Scheme"
impl_in = "Java"
gc = "JVM's GC"
license = "MIT"
notes = "R7RS. Supports the javax.script API. [Evaluating Scheme expressions from Java](https://www.gnu.org/software/kawa/Evaluating-Scheme-expressions-from-Java.html)."

[Ketos]
url = "https://github.com/murarth/ketos"
lang = "Ketos"
impl_in = "Rust"
gc = "None (no heap allocation)?"
license = "Apache-2.0"
notes = "A functional Lisp."

[Libfawk]
url = "http://repo.hu/projects/libfawk/"
lang = "Awk, Basic, Pascal"
impl_in = "C"
gc = "Ref. counting"
license = "BSD-3-Clause"
notes = "A multi-language VM. Includes compilers for three languages: Fawk (Awk dialect), Fbas (Basic dialect), and Fpas (Pascal dialect)."

[Libmawk]
url = "http://repo.hu/projects/libmawk/"
lang = "Awk"
impl_in = "C"
gc = "Ref. counting"
license = "**GPL-2.0**"
notes = "Implements Awk. A fork of mawk 1.3 restructured for embedding."

[LIL]
url = "http://runtimeterror.com/tech/lil/"
lang = "LIL"
impl_in = "C, Object Pascal (separate implementations)"
gc = "None (no reference support)"
license = "Zlib"
notes = "A Tcl-like language incompatible with mainline Tcl."

[Lily]
url = "https://github.com/FascinatedBox/lily/"
lang = "Lily"
impl_in = "C"
gc = "Ref. counting + tracing GC"
license = "MIT"
notes = "A language focusing on expressiveness and safety."

[ljs]
url = "https://github.com/mingodad/ljs"
lang = "ljs"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "Lua 5.3, Lua 5.1, and LuaJIT with a C/C++/Java/JavaScript syntax. Can convert Lua source code to ljs."

[Lua]
url = "http://lua.org/"
lang = "Lua"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "The reference implementation of what is likely the world's most popular embedded scripting language. Allows you to precompile scripts to bytecode. Versions 5.1-5.3, which are the ones used today, are not fully compatible with each other."

[LuaJ]
url = "https://sourceforge.net/projects/luaj/"
lang = "Lua"
impl_in = "Java"
gc = "JVM's GC"
license = "MIT"
notes = "A Lua 5.2 spec-compliant interpreter written in Java for JME and JSE. Complies Lua directly to JVM bytecode."

[LuaJIT]
url = "http://luajit.org/"
lang = "Lua"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "Fully compatible with Lua 5.1. Has a built-in C FFI library. [Performance comparison](https://luajit.org/performance.html)."

[Lua-ML]
url = "https://github.com/lindig/lua-ml"
lang = "Lua"
impl_in = "OCaml"
gc = "OCaml's GC"
license = "BSD-2-Clause"
notes = "Embeddable Lua 2.5 reimplementation that integrates with OCaml type and module system. It's possible to extend or even replace the standard library with your own modules."

[Luau]
url = "https://luau-lang.org/"
lang = "Lua"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "Roblox [fork of Lua 5.1](https://luau-lang.org/why) as a scripting language for games to support a gradual type system as well as limiting the set of standard libraries exposed to the users and implements extra sandboxing features to be able to run unprivileged code. Whenever possible, Luau aims to be backwards-compatible with Lua 5.1 and at the same time to incorporate features from later revisions of Lua."

[luerl]
url = "https://github.com/rvirding/luerl"
lang = "Lua"
impl_in = "Erlang"
gc = "Tracing"
license = "Apache-2.0"
notes = "An implementation of Lua 5.2 in pure Erlang with some features like `goto` absent."

[MicroPython]
url = "https://github.com/micropython/micropython"
lang = "Python"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "Implements Python 3.4 syntax and some of the core datatypes."

[Moirai]
url = "https://github.com/moirai-lang/moirai-kt"
lang = "Moirai"
impl_in = "Kotlin"
gc = "JVM's GC"
license = "MIT"
notes = "A scripting language that calculates the worst-case execution time (WCET) before executing each script. Optimized for multi-tenant microservices and serverless applications."

[Molt]
url = "https://github.com/wduquette/molt"
lang = "Tcl"
impl_in = "Rust"
gc = "Ref. counting"
license = "BSD-3-Clause"
notes = "A minimal Tcl implementation for Rust applications and libraries."

[Mond]
url = "https://github.com/Rohansi/Mond/"
lang = "Mond"
impl_in = "C#"
gc = "CLR's GC"
license = "MIT"
notes = "A dynamically typed scripting language with generators, async, remote debugging, and a binding API."

[Mono]
url = "http://www.mono-project.com/docs/advanced/embedding/scripting/"
lang = "C#, other CLR languages"
impl_in = "C"
gc = "Tracing"
license = "MIT and other"
notes = "Implements the [CLR](https://en.wikipedia.org/wiki/Common_Language_Runtime)."

[MoonSharp]
url = "https://www.moonsharp.org/"
lang = "Lua"
impl_in = "C#"
gc = "CLR's GC"
license = "BSD-3-Clause and other"
notes = "CLR Based Lua implementation that is 99% compatible with Lua 5.2"

[mruby]
url = "https://github.com/mruby/mruby"
lang = "Ruby"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A lightweight implementation of Ruby. Has a compile-time package manager."

["mruby/c"]
url = "https://github.com/mrubyc/mrubyc"
lang = "Ruby"
impl_in = "C"
gc = "Ref. counting"
license = "BSD-3-Clause"
notes = "An even smaller implementation of Ruby for microcontrollers with limited memory."

[MuJS]
url = "https://mujs.com/"
lang = "JavaScript"
impl_in = "C"
gc = "Tracing"
license = "ISC"
notes = "Implements JavaScript (ES5). Has a similar C interface to Lua."

[MY-BASIC]
url = "https://github.com/paladin-t/my_basic"
lang = "Basic"
impl_in = "C"
gc = "Ref. counting + cycle-detecting tracing GC"
license = "MIT"
notes = "A Basic dialect with prototype-based OOP."

[Neko]
url = "http://nekovm.org/"
lang = "Haxe, others"
impl_in = "C"
gc = "Boehm"
license = "MIT"
notes = "The NekoVM is a target for several compilers, including [Haxe](http://haxe.org/)."

[NetRexx]
url = "http://www.netrexx.org/"
lang = "Rexx"
impl_in = "Java"
gc = "JVM's GC"
license = "ICU (BSD-like)"
notes = ""

[Never]
url = "https://github.com/never-lang/never"
lang = "Never"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A statically typed functional programming language."

[Nickel]
url = "https://nickel-lang.org/"
lang = "Nickel"
impl_in = "Rust"
gc = "Ref. counting"
license = "MIT"
notes = "A configuration language with gradual typing and contracts. [Python bindings](https://github.com/tweag/nickel/tree/master/pyckel)."

[njs]
url = "https://nginx.org/en/docs/njs/"
lang = "JavaScript"
impl_in = "C"
gc = "None (no collection performed)"
license = "BSD-2-Clause"
notes = "Implements a subset of ES5.1 with some ES6 extensions."

[ooRexx]
url = "http://www.oorexx.org/"
lang = "Rexx"
impl_in = "C++"
gc = "Tracing"
license = "CPL"
notes = "Implements Rexx extended with objects."

[otto]
url = "https://github.com/robertkrimen/otto"
lang = "JavaScript"
impl_in = "Go"
gc = "Go's GC"
license = "MIT"
notes = "Implements ES5 with [some limitations](https://github.com/robertkrimen/otto#caveat-emptor)."

["Pascal Script"]
url = "http://www.remobjects.com/ps.aspx"
lang = "Pascal"
impl_in = "Object Pascal"
gc = "None (manual MM)"
license = "modified zlib/libpng-License with mandatory attribution"
notes = "Statically typed. Implements \"most of Object Pascal\". Can't define new classes."

[Pawn]
url = "http://www.compuphase.com/pawn/pawn.htm"
lang = "Pawn"
impl_in = "C"
gc = "None (no heap allocation)"
license = "Apache-2.0 with a clause to explicitly permit static linking"
notes = "A curly-brace language with a small-footprint VM. Represents data as 4/8-byte \"cells\". Compiles to CPU-specific bytecode. [More](https://wiki.alliedmods.net/Pawn_Tutorial#Language_Paradigms)."

[Perl]
url = "https://www.perl.org/"
lang = "Perl"
impl_in = "C"
gc = "Ref. counting"
license = "Artistic-2.0 or GPL-3.0"
notes = "[Embedding Perl in Another Application](https://perldoc.perl.org/perlembed)"

[pForth]
url = "http://www.softsynth.com/pforth/"
lang = "Forth"
impl_in = "C"
gc = "None (manual MM)"
license = "Public domain"
notes = "A dialect of Forth."

[PH7]
url = "https://github.com/symisc/PH7"
lang = "PHP"
impl_in = "C"
gc = "Ref. counting"
license = "**Symisc Public License** or proprietary"
notes = "Implements a subset of PHP 5.3 with some changes like native UTF-8 support."

[PikaPython]
url = "https://github.com/pikasTech/PikaPython"
lang = "Python"
impl_in = "C"
gc = "Ref. counting"
license = "MIT"
notes = "Implements a variant of Python 3. The degree of compatibility with Python seems to be undocumented. Runs in as little as 4 KiB of RAM. Targets microcontrollers and Linux."

[PicoC]
url = "https://github.com/zsaleeba/picoc"
lang = "C"
impl_in = "C"
gc = "None (manual MM)"
license = "BSD-3-Clause"
notes = "Statically typed. Interprets a subset of C."

[Picol]
url = "https://chiselapp.com/user/dbohdan/repository/picol/"
lang = "Tcl"
impl_in = "C"
gc = "None (no reference support)"
license = "BSD-2-Clause"
notes = "A header-only library interpreter for a limited dialect of Tcl."

[Pluto]
url = "https://github.com/PlutoLang/Pluto"
lang = "Pluto"
impl_in = "C++"
gc = "Tracing"
license = "MIT"
notes = "A superset of Lua 5.4 (outside of incompatibilies caused by new syntax). Adds syntax like `!=`, `break`, and string interpolation; expands the standard library; somewhat improves performance."

[pocketlang]
url = "https://github.com/ThakeeNathees/pocketlang"
lang = "pocketlang"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A small language syntactically similar to Ruby. [Embedding examples](https://github.com/ThakeeNathees/pocketlang/tree/master/tests/native/). [Performance comparison](https://github.com/ThakeeNathees/pocketlang#performance)."

[pocketpy]
url = "https://github.com/blueloveTH/pocketpy"
lang = "Python"
impl_in = "C++"
gc = "Tracing"
license = "MIT"
notes = "Implements a subset of Python 3 (with [some differences](https://pocketpy.dev/features/differences/#different-behaviors)) in a single C++17 header file."

[Python]
url = "https://www.python.org/"
lang = "Python"
impl_in = "C"
gc = "Ref. counting + cycle-detecting tracing GC"
license = "PSFL (BSD-like)"
notes = "[\"Embedding Python in Another Application\"](https://docs.python.org/3/extending/embedding.html)."

["gmqcc/qcvm"]
url = "https://github.com/graphitemaster/gmqcc"
lang = "QuakeC"
impl_in = "C++"
gc = "None (no dynamic memory allocation)"
license = "MIT"
notes = "A QuakeC compiler and VM."

[QuickJS]
url = "https://bellard.org/quickjs/"
lang = "JavaScript"
impl_in = "C"
gc = "Ref. counting + cycle-detecting tracing GC"
license = "MIT"
notes = "A small embedded JavaScript interpreter that implements almost all of ES2019 and much of ES2020."

[Quirrel]
url = "https://github.com/GaijinEntertainment/quirrel"
lang = "Quirrel"
impl_in = "C++"
gc = "Ref. counting"
license = "MIT"
notes = "A fork of Squirrel with [new features](https://quirrel.io/doc/reference/diff_from_original.html)."

[Ravi]
url = "https://github.com/dibyendumajumdar/ravi"
lang = "Lua"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "“Ravi is a dialect of Lua with limited optional static typing and features a JIT compiler powered by MIR as well as support for AOT compilation to native code.”"

[Rebol]
url = "https://github.com/Oldes/Rebol3"
lang = "Rebol"
impl_in = "C"
gc = "Tracing"
license = "Apache-2.0"
notes = "Relative Expression Based Object Language"

[Red]
url = "https://github.com/red/red"
lang = "Red"
impl_in = "Rebol, Red, Red/System"
gc = "Tracing"
license = "BSD-3-Clause, BSL-1.0"
notes = "A descendant of Rebol. Embeddable via [libRed](https://github.com/red/docs/blob/master/en/libred.adoc). Features a cross-platform native GUI system. Intended to have low memory usage."

[Rhai]
url = "https://github.com/jonathandturner/rhai"
lang = "Rhai"
impl_in = "Rust"
gc = "None (Rust-style lifetimes)"
license = "MIT or Apache-2.0"
notes = "An embedded scripting language for Rust inspired by ChaiScript."

[Ring]
url = "https://github.com/ring-lang/ring"
lang = "Ring"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "An embeddable applications programming language with a large standard library and GIL-less multithreading."

[Ruby]
url = "https://www.ruby-lang.org/en/"
lang = "Ruby"
impl_in = "C"
gc = "Tracing"
license = "Choice of BSD-2-Clause, Ruby license, GPL-2.0"
notes = "An embeddable object-oriented scripting language. [Running Ruby in C](https://silverhammermba.github.io/emberb/embed/)."

[Rune]
url = "https://github.com/rune-rs/rune"
lang = "Rune"
impl_in = "Rust"
gc = "Ref. counting"
license = "MIT or Apache-2.0"
notes = "An embeddable dynamic programming language. Asynchronous-first and [const-evaluation](https://rune-rs.github.io/#const-evaluation)."

[s7]
url = "https://ccrma.stanford.edu/software/snd/snd/s7.html"
lang = "Scheme"
impl_in = "C"
gc = "Tracing"
license = "BSD-3-Clause"
notes = "Implements a subset of R5RS/R7RS. Descended from TinyScheme."

[sci]
url = "https://github.com/borkdude/sci"
lang = "Clojure"
impl_in = "Clojure"
gc = "host VM's GC"
license = "EPL-1.0"
notes = "An interpreter for a subset of Clojure for Clojure and ClojureScript."

[SGScript]
url = "https://github.com/snake5/sgscript"
lang = "SGScript"
impl_in = "C"
gc = "Ref. counting + tracing CG"
license = "MIT"
notes = "[Features](http://www.sgscript.org/pages/advdocs/sgscript.docs.htm#Why-SGScript) include a built-in data serialization format, coroutines, class-based OOP, sandboxed evaluation, a built-in debugger and profiler."

[Shine]
url = "https://github.com/richardhundt/shine"
lang = "Shine"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A language based on Lua with additional safety and expressiveness features implemented as a fork of LuaJIT."

[simpleeval]
url = "https://github.com/danthedeckie/simpleeval"
lang = "simpleeval"
impl_in = "Python"
gc = "Python's GC"
license = "MIT"
notes = "Evaluates expressions in a subset of Python."

[Snek]
url = "https://github.com/keith-packard/snek"
lang = "Snek"
impl_in = "C"
gc = "Tracing"
license = "**GPL-3.0-or-later**"
notes = 'A Python-inspired language. Targets "processors too small to run MicroPython".'

[SquiLu]
url = "https://github.com/mingodad/squilu"
lang = "SquiLu"
impl_in = "C++"
gc = "Ref. counting"
license = "MIT, some extensions LGPL or GPL"
notes = "A fork of [Squirrel](http://squirrel-lang.org/). Changes the syntax to accept a subset of JavaScript and C/C++. Implements Lua's features like string pattern matching and global table manipulation functions. Adds extensions for database access (SQLite3, MySQL, PostgreSQL), sockets, and other features."

[Squirrel]
url = "http://squirrel-lang.org/"
lang = "Squirrel"
impl_in = "C++"
gc = "Ref. counting"
license = "MIT"
notes = "A language inspired by Lua and JavaScript/Python. Has a Lua-like C++ API. Differentiates itself from Lua with the use of reference counting in place of Lua's tracing GC, a curly-brace syntax, built-in class-based OOP, and zero-indexed arrays."

["Starlark (Go)"]
url = "https://github.com/google/starlark-go/"
lang = "Starlark"
impl_in = "Go"
gc = "Go's GC"
license = "BSD-3-Clause"
notes = "A small dialect of Python for configuration. Not Turing-complete. Untrusted code: can't access the file system and network, can use up memory and CPU to perform a DoS attack. [Spec](https://github.com/bazelbuild/starlark). [Python bindings](https://github.com/caketop/python-starlark-go)."

["Starlark (Java)"]
url = "https://github.com/bazelbuild/bazel/tree/master/src/main/java/net/starlark/java"
lang = "Starlark"
impl_in = "Java"
gc = "JVM's GC"
license = "Apache-2.0"
notes = "Starlark for the JVM. The original implementation."

["Starlark (Rust)"]
url = "https://github.com/facebookexperimental/starlark-rust"
lang = "Starlark"
impl_in = "Rust"
gc = "?"
license = "Apache-2.0"
notes = "Starlark in Rust. [Python bindings](https://github.com/inducer/starlark-pyo3)."

[Steel]
url = "https://github.com/mattwparas/steel"
lang = "Scheme"
impl_in = "Rust"
gc = "Ref. counting + tracing GC"
license = "Apache-2.0 or MIT"
notes = "Aims for eventual R5RS and R7RS compliance. Has extensions inspired by Racket."

[Tcl]
url = "http://tcl-lang.org/"
lang = "Tcl"
impl_in = "C"
gc = "Ref. counting"
license = "Tcl license (BSD-like)"
notes = "An embeddable general-purpose scripting language with a rich C API. Has a cross-platform GUI toolkit called [Tk](https://wiki.tcl-lang.org/477). [How to embed Tcl in C applications](https://wiki.tcl-lang.org/2074)."

[tcc]
url = "https://repo.or.cz/tinycc.git/"
lang = "C"
impl_in = "C"
gc = "None"
license = "LGPL-2.0-only"
notes = "A small C compiler that can be used as a library for a C JIT. [libtcc header](https://repo.or.cz/tinycc.git/blob/HEAD:/libtcc.h). [Embedding example](https://repo.or.cz/tinycc.git/blob/HEAD:/tests/libtcc_test.c)."

[TinyScheme]
url = "http://tinyscheme.sourceforge.net/"
lang = "Scheme"
impl_in = "C"
gc = "Tracing?"
license = "BSD-3-Clause"
notes = "Implements a subset of R5RS."

[Toy]
url = "https://github.com/Ratstail91/Toy"
lang = "Toy"
impl_in = "C"
gc = "Ref. counting"
license = "Zlib"
notes = "Has an optional type system. [Embedding Toy](https://toylang.com/deep-dive/embedding-toy)."

[TruffleRuby]
url = "https://github.com/oracle/truffleruby"
lang = "Ruby"
impl_in = "C, Java"
gc = "JVM's GC"
license = "UPL-1.0"
notes = "Implements Ruby for GraalVM (HotSpot JVM) using Truffle."

[Umka]
url = "https://github.com/vtereshkov/umka-lang"
lang = "Umka"
impl_in = "C"
gc = "Ref. counting"
license = "BSD-2-Clause"
notes = "Statically typed."

[Wirefilter]
url = "https://github.com/cloudflare/wirefilter"
lang = "Wirefilter"
impl_in = "Rust"
gc = "None (no dynamic memory allocation)"
license = "MIT"
notes = "An expression language for Wireshark-like filters."

[Wren]
url = "https://github.com/munificent/wren"
lang = "Wren"
impl_in = "C"
gc = "Tracing"
license = "MIT"
notes = "A small class-based performance-oriented scripting language. [Performance comparison](https://wren.io/performance.html)."

["Yaegi"]
url = "https://github.com/traefik/yaegi"
lang = "Go"
impl_in = "Go"
gc = "Go's GC"
license = "Apache-2.0"
notes = "An embedded complete Go interpreter, on top of the Go runtime."

[ZetScript]
url = "https://zetscript.org"
lang = "ZetScript"
impl_in = "C++"
gc = "Ref. counting"
license = "MIT"
notes = "Comes with an API for C++ interop."

[zygomys]
url = "https://github.com/glycerine/zygomys"
lang = "zygomys"
impl_in = "Go"
gc = "Go's GC"
license = "BSD-2-Clause"
notes = "An embedded Lisp for Go. Inspired by Clojure, but more oriented towards imperative programming. Has an infix syntax layer that looks like a subset of Go."
